prefix void: <http://rdfs.org/ns/void#>
prefix xkos: <http://rdf-vocabulary.ddialliance.org/xkos#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
"
if (!is.null(prefix)){
sparql_prefix = paste(prefix, sparql_prefix, sep = "/n")
}
# run the query
q1 = paste0(sparql_prefix, '
SELECT DISTINCT str(?spLabel) AS label  str(?spCoordinates) AS coord
WHERE
{
GRAPH <http://deeptimekb.org/iscallnew>
{
?bdry  a gts:GeochronologicBoundary ;
dc:description
[
gts:stratotype ?baseSp ;
skos:inScheme ts:isc2018-08
] .
?baseSp samfl:shape ?spLocation ;
rdfs:label ?spLabel ;
gts:ratifiedGSSP ?tf .
FILTER(regex(str(?tf), "true", "i"))
?spLocation geo:asWKT ?spCoordinates .
}
}
')
res1 = SPARQL(endpoint, q1)$results
library(ggplot2)
library(SPARQL)
endpoint = "http://virtuoso.nkn.uidaho.edu:8890/sparql/"
# attach SPARQL querry prefix. Note: the graph for our study should be updated
sparql_prefix = "
prefix tssc: <http://deeptimekb.org/tssc#>
prefix tsnc: <http://deeptimekb.org/tsnc#>
prefix tswe: <http://deeptimekb.org/tswe#>
prefix tsbr: <http://deeptimekb.org/tsbr#>
prefix tsba: <http://deeptimekb.org/tsba#>
prefix tsjp: <http://deeptimekb.org/tsjp#>
prefix tsau: <http://deeptimekb.org/tsau#>
prefix tsnc: <http://deeptimekb.org/tsnc#>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix dcterms: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix geo: <http://www.opengis.net/ont/geosparql#>
prefix gts: <http://resource.geosciml.org/ontology/timescale/gts#>
prefix isc: <http://resource.geosciml.org/classifier/ics/ischart/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rank: <http://resource.geosciml.org/ontology/timescale/rank/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix samfl: <http://def.seegrid.csiro.au/ontology/om/sam-lite#>
prefix sf: <http://www.opengis.net/ont/sf#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix sosa: <http://www.w3.org/ns/sosa/>
prefix thors: <http://resource.geosciml.org/ontology/timescale/thors#>
prefix time: <http://www.w3.org/2006/time#>
prefix ts: <http://resource.geosciml.org/vocabulary/timescale/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xkos: <http://rdf-vocabulary.ddialliance.org/xkos#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
"
if (!is.null(prefix)){
sparql_prefix = paste(prefix, sparql_prefix, sep = "/n")
}
# run the query
q1 = paste0(sparql_prefix, '
SELECT DISTINCT str(?spLabel) AS label  str(?spCoordinates) AS coord
WHERE
{
GRAPH <http://deeptimekb.org/iscallnew>
{
?bdry  a gts:GeochronologicBoundary ;
dc:description
[
gts:stratotype ?baseSp ;
skos:inScheme ts:isc2018-08
] .
?baseSp samfl:shape ?spLocation ;
rdfs:label ?spLabel ;
gts:ratifiedGSSP ?tf .
FILTER(regex(str(?tf), "true", "i"))
?spLocation geo:asWKT ?spCoordinates .
}
}
')
res1 = SPARQL(endpoint, q1)$results
endpoint = "http://virtuoso.nkn.uidaho.edu:8890/sparql/"
# attach SPARQL querry prefix. Note: the graph for our study should be updated
sparql_prefix = "
prefix tssc: <http://deeptimekb.org/tssc#>
prefix tsnc: <http://deeptimekb.org/tsnc#>
prefix tswe: <http://deeptimekb.org/tswe#>
prefix tsbr: <http://deeptimekb.org/tsbr#>
prefix tsba: <http://deeptimekb.org/tsba#>
prefix tsjp: <http://deeptimekb.org/tsjp#>
prefix tsau: <http://deeptimekb.org/tsau#>
prefix tsnc: <http://deeptimekb.org/tsnc#>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix dcterms: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix geo: <http://www.opengis.net/ont/geosparql#>
prefix gts: <http://resource.geosciml.org/ontology/timescale/gts#>
prefix isc: <http://resource.geosciml.org/classifier/ics/ischart/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rank: <http://resource.geosciml.org/ontology/timescale/rank/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix samfl: <http://def.seegrid.csiro.au/ontology/om/sam-lite#>
prefix sf: <http://www.opengis.net/ont/sf#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix sosa: <http://www.w3.org/ns/sosa/>
prefix thors: <http://resource.geosciml.org/ontology/timescale/thors#>
prefix time: <http://www.w3.org/2006/time#>
prefix ts: <http://resource.geosciml.org/vocabulary/timescale/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xkos: <http://rdf-vocabulary.ddialliance.org/xkos#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
"
if (!is.null(prefix)){
sparql_prefix = paste(prefix, sparql_prefix, sep = "/n")
}
# run the query
q1 = paste0(sparql_prefix, '
SELECT DISTINCT str(?spLabel) AS label  str(?spCoordinates) AS coord
WHERE
{
GRAPH <http://deeptimekb.org/iscallnew>
{
?bdry  a gts:GeochronologicBoundary ;
dc:description
[
gts:stratotype ?baseSp ;
skos:inScheme ts:isc2018-08
] .
?baseSp samfl:shape ?spLocation ;
rdfs:label ?spLabel ;
gts:ratifiedGSSP ?tf .
FILTER(regex(str(?tf), "true", "i"))
?spLocation geo:asWKT ?spCoordinates .
}
}
')
res1 = SPARQL(endpoint, q1)$results
endpoint = "http://virtuoso.nkn.uidaho.edu:8890/sparql/"
# attach SPARQL querry prefix. Note: the graph for our study should be updated
sparql_prefix = "
prefix tssc: <http://deeptimekb.org/tssc#>
prefix tsnc: <http://deeptimekb.org/tsnc#>
prefix tswe: <http://deeptimekb.org/tswe#>
prefix tsbr: <http://deeptimekb.org/tsbr#>
prefix tsba: <http://deeptimekb.org/tsba#>
prefix tsjp: <http://deeptimekb.org/tsjp#>
prefix tsau: <http://deeptimekb.org/tsau#>
prefix tsnc: <http://deeptimekb.org/tsnc#>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix dcterms: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix geo: <http://www.opengis.net/ont/geosparql#>
prefix gts: <http://resource.geosciml.org/ontology/timescale/gts#>
prefix isc: <http://resource.geosciml.org/classifier/ics/ischart/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rank: <http://resource.geosciml.org/ontology/timescale/rank/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix samfl: <http://def.seegrid.csiro.au/ontology/om/sam-lite#>
prefix sf: <http://www.opengis.net/ont/sf#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix sosa: <http://www.w3.org/ns/sosa/>
prefix thors: <http://resource.geosciml.org/ontology/timescale/thors#>
prefix time: <http://www.w3.org/2006/time#>
prefix ts: <http://resource.geosciml.org/vocabulary/timescale/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xkos: <http://rdf-vocabulary.ddialliance.org/xkos#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
"
if (!is.null(prefix)){
sparql_prefix = paste(prefix, sparql_prefix, sep = "/n")
}
# run the query
q1 = paste0(sparql_prefix, '
SELECT DISTINCT (str(?spLabel) AS ?label1) (str(?spCoordinates) AS ?coord1)
WHERE
{
GRAPH <http://deeptimekb.org/iscallnew>
{
?bdry  a gts:GeochronologicBoundary ;
dc:description
[
gts:stratotype ?baseSp ;
skos:inScheme ts:isc2018-08
] .
?baseSp samfl:shape ?spLocation ;
rdfs:label ?spLabel ;
gts:ratifiedGSSP ?tf .
FILTER(regex(str(?tf), "true", "i"))
?spLocation geo:asWKT ?spCoordinates .
}
}
')
res1 = SPARQL(endpoint, q1)$results
res1
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
?ggmap
??ggmap
help(ggmap)
library(ggmap)
install.packages("ggmap")
p <- ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
library(ggmap)
library(ggplot2)
library(SPARQL)
library(ggmap)
install.packages("rworldmap")
library(rworldmap)
library(ggmap)
library(rworldmap)
library(ggplot2)
library(SPARQL)
library(ggmap)
library(rworldmap)
library(rworldxtra)
library(stringr)
endpoint = "http://virtuoso.nkn.uidaho.edu:8890/sparql/"
# attach SPARQL querry prefix. Note: the graph for our study should be updated
sparql_prefix = "
prefix tssc: <http://deeptimekb.org/tssc#>
prefix tsnc: <http://deeptimekb.org/tsnc#>
prefix tswe: <http://deeptimekb.org/tswe#>
prefix tsbr: <http://deeptimekb.org/tsbr#>
prefix tsba: <http://deeptimekb.org/tsba#>
prefix tsjp: <http://deeptimekb.org/tsjp#>
prefix tsau: <http://deeptimekb.org/tsau#>
prefix tsnc: <http://deeptimekb.org/tsnc#>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix dcterms: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix geo: <http://www.opengis.net/ont/geosparql#>
prefix gts: <http://resource.geosciml.org/ontology/timescale/gts#>
prefix isc: <http://resource.geosciml.org/classifier/ics/ischart/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rank: <http://resource.geosciml.org/ontology/timescale/rank/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix samfl: <http://def.seegrid.csiro.au/ontology/om/sam-lite#>
prefix sf: <http://www.opengis.net/ont/sf#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix sosa: <http://www.w3.org/ns/sosa/>
prefix thors: <http://resource.geosciml.org/ontology/timescale/thors#>
prefix time: <http://www.w3.org/2006/time#>
prefix ts: <http://resource.geosciml.org/vocabulary/timescale/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xkos: <http://rdf-vocabulary.ddialliance.org/xkos#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
"
if (!is.null(prefix)){
sparql_prefix = paste(prefix, sparql_prefix, sep = "/n")
}
# run the query
q1 = paste0(sparql_prefix, '
SELECT DISTINCT (str(?spLabel) AS ?label1) (str(?spCoordinates) AS ?coord1)
WHERE
{
GRAPH <http://deeptimekb.org/iscallnew>
{
?bdry  a gts:GeochronologicBoundary ;
dc:description
[
gts:stratotype ?baseSp ;
skos:inScheme ts:isc2018-08
] .
?baseSp samfl:shape ?spLocation ;
rdfs:label ?spLabel ;
gts:ratifiedGSSP ?tf .
FILTER(regex(str(?tf), "true", "i"))
?spLocation geo:asWKT ?spCoordinates .
}
}
')
res1 = SPARQL(endpoint, q1)$results
library(stringr)
data<-read.csv("dsprofile2020s_no_id.csv")
head(data)
#K-Means for all the seven attributes in the data science profile
km.result <- kmeans(data, 5, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
km.result <- kmeans(data, 5, iter.max = 10, nstart = 3)
#K-Means for the first four attributes (CS, Math, Stats, ML) in the data science profile
km.result1 <- kmeans(data[, 1:4], 3, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
#K-Means for the last three attributes (domainE, Viz and commun.) in the data science profile
km.result2 <- kmeans(data[, 5:7], 3, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
#K-Means for CS in the data science profile
km.result3 <- kmeans(data$CS, 3, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
km.result
km.result1
km.result2
km.result3
#data<-read.csv("dsprofile2020s_no_id.csv")
data<-read.csv("data-science-profile20-22.csv")
head(data)
#K-Means for all the seven attributes in the data science profile
km.result <- kmeans(data, 5, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
km.result <- kmeans(data, 5, iter.max = 10, nstart = 3)
#K-Means for the first four attributes (CS, Math, Stats, ML) in the data science profile
km.result1 <- kmeans(data[, 1:4], 3, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
#K-Means for the last three attributes (domainE, Viz and commun.) in the data science profile
km.result2 <- kmeans(data[, 5:7], 3, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
#K-Means for CS in the data science profile
km.result3 <- kmeans(data$CS, 3, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
km.result
km.result1
km.result2
km.result3
#data<-read.csv("dsprofile2020s_no_id.csv")
data<-read.csv("data-science-profile20-24.csv")
head(data)
#K-Means for all the seven attributes in the data science profile
km.result <- kmeans(data, 5, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
km.result
km.result <- kmeans(data, 5, iter.max = 10, nstart = 3)
View(km.result)
km.result
#K-Means for the first four attributes (CS, Math, Stats, ML) in the data science profile
km.result1 <- kmeans(data[, 1:4], 3, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
km.result1
#K-Means for the last three attributes (domainE, Viz and commun.) in the data science profile
km.result2 <- kmeans(data[, 5:7], 3, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
km.result2
#K-Means for CS in the data science profile
km.result3 <- kmeans(data$CS, 3, iter.max = 10, nstart = 3,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
km.result3
??kmeans
help(kmeans)
#K-Means for all the seven attributes in the data science profile
km.result <- kmeans(data, 5, iter.max = 10, nstart = 3,
algorithm = "Hartigan-Wong", trace=FALSE)
km.result
km.result <- kmeans(data, 5, iter.max = 10, nstart = 3)
km.result
#K-Means for all the seven attributes in the data science profile
km.result <- kmeans(data, 5, iter.max = 10, nstart = 3,
algorithm = "Lloyd", trace=FALSE)
km.result
#K-Means for all the seven attributes in the data science profile
km.result <- kmeans(data, 5, iter.max = 10, nstart = 3,
algorithm = "MacQueen", trace=FALSE)
km.result
#K-Means for all the seven attributes in the data science profile - with the default algorithm "Hartigan-Wong"
km.result <- kmeans(data, 5, iter.max = 10, nstart = 1)
km.result
rm(ls())
rm(ls<-ls())
ls()
rm(l=ls())
rm(list = ls())
#K-Means for all the seven attributes in the data science profile - with the default algorithm "Hartigan-Wong"
help(km)
#K-Means for all the seven attributes in the data science profile - with the default algorithm "Hartigan-Wong"
help(kmeans)
km.result <- kmeans(data, 5, iter.max = 10, nstart = 1)
setwd("~/Library/CloudStorage/OneDrive-UniversityofIdaho/0 Teaching/2024 Spring CS479-579 Data Science/2024 dsprofile kmeans")
#data<-read.csv("dsprofile2020s_no_id.csv")
data<-read.csv("data-science-profile24.csv")
head(data)
lm(data$Math ~ data$Stats)
lm(data$CS ~ data$Math)
help(lm)
View(data)
liner_reg_model <- lm(data$CS ~ data$Math)
View(liner_reg_model)
liner_reg_model
rm(list = ls())
#data<-read.csv("dsprofile2020s_no_id.csv")
data<-read.csv("data-science-profile24.csv")
head(data)
liner_reg_model <- lm(data$CS ~ data$Math)
liner_reg_model
summary(liner_reg_model)
#data<-read.csv("dsprofile2020s_no_id.csv")
data<-read.csv("data-science-profile20-24.csv")
#find correlations between CS and Math skills
liner_reg_model <- lm(data$CS ~ data$Math)
liner_reg_model
summary(liner_reg_model)
#check correlations between Math and Stats skills
liner_reg_model <- lm(data$Math ~ data$Stats)
liner_reg_model
summary(liner_reg_model)
#data<-read.csv("dsprofile2020s_no_id.csv")
#data<-read.csv("data-science-profile20-24.csv")
data<-read.csv("data-science-profile24.csv")
#check correlations between Math and Stats skills
liner_reg_model <- lm(data$Math ~ data$Stats)
liner_reg_model
summary(liner_reg_model)
#check correlations between Math and Communication skills
liner_reg_model <- lm(data$Math ~ data$Comm)
liner_reg_model
summary(liner_reg_model)
#check correlations between CS and Visualization skills
liner_reg_model <- lm(data$Math ~ data$Data.Viz)
liner_reg_model
summary(liner_reg_model)
data<-read.csv("data-science-profile20-24.csv")
#check correlations between CS and Visualization skills
liner_reg_model <- lm(data$Math ~ data$Data.Viz)
liner_reg_model
summary(liner_reg_model)
#check correlations between CS and Visualization skills
liner_reg_model <- lm(data$CS ~ data$Data.Viz)
liner_reg_model
summary(liner_reg_model)
#check correlations between Math and Visualization skills
liner_reg_model <- lm(data$Math ~ data$Data.Viz)
liner_reg_model
summary(liner_reg_model)
data<-read.csv("data-science-profile24.csv")
#check correlation between Math and Visualization skills
liner_reg_model <- lm(data$Math ~ data$Data.Viz)
liner_reg_model
summary(liner_reg_model)
#K-Means for all the seven attributes in the data science profile - with the default algorithm "Hartigan-Wong"
km.result <- kmeans(data, 5, iter.max = 10, nstart = 1)
km.result
#If we only want two clusters in the results
km.result <- kmeans(data, 2, iter.max = 10, nstart = 1)
km.result
#Add the clustering result back to the data in a column 'Group'
data$Group = km.result$cluster
data
rm(list = ls())
data<-read.csv("data-science-profile20-24.csv")
data<-read.csv("data-science-profile24.csv")
head(data)
#check correlation between CS and Math skills
# from the summary we can see p-value of the model.
#Usually, A low P-value (< 0.05) means that the coefficient is likely not to equal zero.
#A high P-value (> 0.05) means that we cannot conclude that the explanatory variable affects the dependent variable.
liner_reg_model <- lm(data$CS ~ data$Math)
liner_reg_model
summary(liner_reg_model)
#check correlation between Math and Stats skills
liner_reg_model <- lm(data$Math ~ data$Stats ~ data$CS)
liner_reg_model
summary(liner_reg_model)
#check correlation between Math and Stats skills
liner_reg_model <- lm(data$Math ~ data$Stats ~ data$CS)
liner_reg_model
summary(liner_reg_model)
#check correlation between Math and Stats skills
liner_reg_model <- lm(data$Math ~ data$Stats ~ data$CS)
#check correlation between Math and Stats skills
liner_reg_model <- lm(data$Math ~ data$Stats)
liner_reg_model
#check correlation between Math and Stats skills
liner_reg_model <- lm(data$Math ~ data$Stats)
liner_reg_model
summary(liner_reg_model)
#check correlation between Math and Visualization skills
liner_reg_model <- lm(data$Math ~ data$Data.Viz)
liner_reg_model
summary(liner_reg_model)
#check correlation between Math and Visualization skills
liner_reg_model <- lm(data$Math ~ data$Data.Viz + data$CS)
liner_reg_model
summary(liner_reg_model)
#check correlation between Math and Visualization skills
liner_reg_model <- lm(data$Math ~ data$Data.Viz + data$CS)
liner_reg_model
summary(liner_reg_model)
help(kmeans)
#K-Means for all the seven attributes in the data science profile - with the default algorithm "Hartigan-Wong"
#We want five clusters in the result
km.result <- kmeans(data, 5, iter.max = 10, nstart = 1)
km.result
#Add the clustering result back to the data in a column 'Group'
data$Group = km.result$cluster
data
